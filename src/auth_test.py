import pytest
import auth
import user
from error import InputError, AccessError


def test_register_return_type():
    '''Test the types of values returned by auth_register'''

    user = auth.auth_register('theresavanaria@email.com', 'password',
                              'Theresa', 'Vanaria')
    assert isinstance(user['u_id'], int)
    assert isinstance(user['token'], str)


def test_register_duplicate():
    '''Test the registration of multiple users with the same email'''

    # Setup 'existing' user
    auth.auth_register('durumarion@email.com', 'password', 'Duru', 'Marion')

    with pytest.raises(InputError):
        auth.auth_register('durumarion@email.com', 'password', 'Duru',
                           'Marion')


def test_register_password():
    '''Test the input of various password lengths into auth_register'''

    # Valid
    auth.auth_register('richardoutterridge@email.com', '123456', 'Richard',
                       'Outterridge')

    # <6 Password Length
    with pytest.raises(InputError):
        auth.auth_register('richardoutterridge@email.com', '12345', 'Richard',
                           'Outterridge')

    # 32 character password that is within the (assumed) maximum length for password
    auth.auth_register('richardoutterridge@email.com', 'i' * 32, 'Richard',
                       'Outterridge')


def test_register_first_name():
    '''Test the input of various first name lengths into auth_register'''

    # Valid
    auth.auth_register('valid@email.com', 'password', 'Giltbert', 'Blue')

    # <1 Character
    with pytest.raises(InputError):
        auth.auth_register('valid@email.com', 'password', '', 'Blue')

    # >50 Characters
    with pytest.raises(InputError):
        auth.auth_register('valid@email.com', 'password', 'a' * 50, 'Blue')


def test_register_last_name():
    '''Test the input of various last name lengths into auth_register'''

    # Valid
    auth.auth_register('valid@email.com', 'password', 'Aziza', 'Addens')

    # <1 Character
    with pytest.raises(InputError):
        auth.auth_register('valid@email.com', 'password', 'Aziza', '')

    # >50 Characters
    with pytest.raises(InputError):
        auth.auth_register('valid@email.com', 'password', 'Aziza', 'a' * 50)


def test_register_handle():
    '''Test that the handle generated by auth_register matches assumption'''

    test_user = auth.auth_register('valid@email.com', 'password', 'First',
                                   'Last')
    test_profile = user.user_profile(test_user['token'], test_user['u_id'])
    assert test_profile['user']['handle_str'] == 'firstlast'


def test_register_unique_handle():
    '''Test that handles generated by auth_register are unique'''

    user_1 = auth.auth_register('valid@email.com', 'password', 'First', 'Last')
    user_profile_1 = user.user_profile(user_1['token'], user_1['u_id'])

    user_2 = auth.auth_register('avalid@email.com', 'password', 'First',
                                'Last')
    user_profile_2 = user.user_profile(user_2['token'], user_2['u_id'])

    assert user_profile_1['user']['handle_str'] != user_profile_2['user'][
        'handle_str']


def test_register_long_handle():
    '''Test that handles generated by auth_register are cut off at 20 characters'''

    test_user = auth.auth_register('valid@email.com', 'password',
                                   '123456789testing', '123456789testing')
    test_profile = user.user_profile(test_user['token'], test_user['u_id'])
    assert test_profile['user']['handle_str'] == '123456789testing1234'


def test_register_email_valid(valid_emails):
    '''Test input of valid emails into auth_register'''

    for email in valid_emails:
        auth.auth_register(email, 'password', 'First', 'Last')


def test_register_email_invalid(invalid_emails):
    '''Test input of invalid emails into auth_register'''

    for email in invalid_emails:
        with pytest.raises(InputError):
            auth.auth_register(email, 'password', 'First', 'Last')


def test_login_email_valid(valid_emails):
    '''Test input of valid emails into auth_login'''

    for email in valid_emails:
        auth.auth_login(email, 'password')


def test_login_email_invalid(invalid_emails):
    '''Test input of invalid emails into auth_login'''

    for email in invalid_emails:
        with pytest.raises(InputError):
            auth.auth_login(email, 'password')


@pytest.fixture
def paris():
    '''Fixture for a creating a user named Paris Cler'''

    return auth.auth_register('pariscler@email.com', 'pariscler0229', 'Paris',
                              'Cler')


def test_login_return_type(paris):
    '''Test the types of values returned by auth_login'''

    paris_login = auth.auth_login('pariscler@email.com', 'pariscler0229')
    assert isinstance(paris_login['u_id'], int)
    assert isinstance(paris_login['token'], str)


def test_login_u_id(paris):
    '''Test that the u_id returned auth_login matches u_id returned by auth_register'''

    paris_login = auth.auth_login('pariscler@email.com', 'pariscler0229')
    assert paris_login['u_id'] == paris['u_id']


def test_login_password(paris):
    '''Test auth_login with an incorrect password'''

    # Password is not correct
    with pytest.raises(InputError):
        auth.auth_login('pariscler@email.com', 'incorrect_password')


def test_login_invalid_user():
    '''Test with an email which does not belong to a user'''

    with pytest.raises(InputError):
        auth.auth_login('non_existent_user@email.com', '12345678')


def test_login_multiple_sessions(paris):
    '''Test that auth_login can create multiple session at once'''

    session_1 = auth.auth_login('pariscler@email.com', 'pariscler0229')
    session_2 = auth.auth_login('pariscler@email.com', 'pariscler0229')
    session_3 = auth.auth_login('pariscler@email.com', 'pariscler0229')

    session_tokens = [
        paris['token'], session_1['token'], session_2['token'],
        session_3['token']
    ]

    # Verify that all session_tokens are unique
    assert len(set(session_tokens)) == len(session_tokens)


def test_logout(paris):
    '''Test that auth_logout returns True on successful Logout'''

    assert auth.auth_logout(paris['token'])['is_success']


def test_logout_invalid_token(paris):
    '''Test that auth_logout raises an AccessError when given invalid token'''

    assert auth.auth_logout(paris['token'])['is_success']

    # input invalidated token into function
    with pytest.raises(AccessError):
        auth.auth_logout(paris['token'])['is_success']
