============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-3.10.1, py-1.7.0, pluggy-0.8.0
rootdir: /tmp_amd/adams/export/adams/5/z5248282/cs1531/proj, inifile:
plugins: cov-2.8.1
collected 123 items

src/echo_test.py ..                                                      [  1%]
src/auth_test/auth_login_test.py ..FFF.F                                 [  7%]
src/auth_test/auth_logout_test.py .F                                     [  8%]
src/auth_test/auth_register_test.py .FFFFFFF.F                           [ 17%]
src/channel_test/channel_addowner_test.py FF.FFF                         [ 21%]
src/channel_test/channel_details_test.py .F.FF                           [ 26%]
src/channel_test/channel_invite_test.py FFFF                             [ 29%]
src/channel_test/channel_join_test.py FFF.F                              [ 33%]
src/channel_test/channel_leave_test.py FFFFFF                            [ 38%]
src/channel_test/channel_messages_test.py FFFFFF                         [ 43%]
src/channel_test/channel_removeowner_test.py FFFFF                       [ 47%]
src/channels_test/channels_create_test.py .F.FF                          [ 51%]
src/channels_test/channels_list_test.py F.FF                             [ 54%]
src/channels_test/channels_listall_test.py ..FF                          [ 57%]
src/message_test/message_edit_test.py .F.FFF                             [ 62%]
src/message_test/message_remove_test.py ..FF..F                          [ 68%]
src/message_test/message_send_test.py .FFFFFF                            [ 73%]
src/other_test/other_search_test.py FF..FFF.F                            [ 81%]
src/other_test/other_user_all_test.py .FF                                [ 83%]
src/user_test/user_profile_setemail_test.py FF                           [ 85%]
src/user_test/user_profile_sethandle_test.py FFFFFF                      [ 90%]
src/user_test/user_profile_setname_test.py FFFFF                         [ 94%]
src/user_test/user_profile_test.py ..FFFFF                               [100%]

=================================== FAILURES ===================================
_____________________________ test_login_password ______________________________

paris = {'token': '12345', 'u_id': 1}

    def test_login_password(paris):
        '''Test auth_login with an incorrect password'''
    
        # Password is not correct
        with pytest.raises(InputError):
>           auth.auth_login('pariscler@email.com', 'incorrect_password')
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/auth_test/auth_login_test.py:34: Failed
___________________________ test_login_invalid_user ____________________________

    def test_login_invalid_user():
        '''Test with an email which does not belong to a user'''
    
        with pytest.raises(InputError):
>           auth.auth_login('non_existent_user@email.com', '12345678')
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/auth_test/auth_login_test.py:41: Failed
_________________________ test_login_multiple_sessions _________________________

paris = {'token': '12345', 'u_id': 1}

    def test_login_multiple_sessions(paris):
        '''Test that auth_login can create multiple session at once'''
    
        session_1 = auth.auth_login('pariscler@email.com', 'pariscler0229')
        session_2 = auth.auth_login('pariscler@email.com', 'pariscler0229')
        session_3 = auth.auth_login('pariscler@email.com', 'pariscler0229')
    
        session_tokens = [
            paris['token'], session_1['token'], session_2['token'],
            session_3['token']
        ]
    
        # Verify that all session_tokens are unique
>       assert len(set(session_tokens)) == len(session_tokens)
E       AssertionError: assert 1 == 4
E        +  where 1 = len({'12345'})
E        +    where {'12345'} = set(['12345', '12345', '12345', '12345'])
E        +  and   4 = len(['12345', '12345', '12345', '12345'])

src/auth_test/auth_login_test.py:57: AssertionError
___________________________ test_login_email_invalid ___________________________

invalid_emails = ('.latonyadavison@email.com', 'latonyadavison.@email.com', 'latonya..davison.@email.com', 'latonya@davison@email.com', 'latonyadavison.com')

    def test_login_email_invalid(invalid_emails):
        '''Test input of invalid emails into auth_login'''
    
        for email in invalid_emails:
            with pytest.raises(InputError):
>               auth.auth_login(email, 'password')
E               Failed: DID NOT RAISE <class 'error.InputError'>

src/auth_test/auth_login_test.py:72: Failed
__________________________ test_logout_invalid_token ___________________________

invalid_token = '12345'

    def test_logout_invalid_token(invalid_token):
        '''Test that auth_logout raises an AccessError when given invalid token'''
    
        with pytest.raises(AccessError):
>           auth.auth_logout(invalid_token)['is_success']
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/auth_test/auth_logout_test.py:24: Failed
___________________________ test_register_duplicate ____________________________

    def test_register_duplicate():
        '''Test the registration of multiple users with the same email'''
    
        # Setup 'existing' user
        auth.auth_register('durumarion@email.com', 'password', 'Duru', 'Marion')
    
        with pytest.raises(InputError):
            auth.auth_register('durumarion@email.com', 'password', 'Duru',
>                              'Marion')
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/auth_test/auth_register_test.py:24: Failed
____________________________ test_register_password ____________________________

    def test_register_password():
        '''Test the input of various password lengths into auth_register'''
    
        # Valid
        auth.auth_register('richardoutterridge@email.com', '123456', 'Richard',
                           'Outterridge')
    
        # <6 Password Length
        with pytest.raises(InputError):
            auth.auth_register('richardoutterridge@email.com', '12345', 'Richard',
>                              'Outterridge')
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/auth_test/auth_register_test.py:37: Failed
___________________________ test_register_first_name ___________________________

    def test_register_first_name():
        '''Test the input of various first name lengths into auth_register'''
    
        # Valid
        auth.auth_register('valid@email.com', 'password', 'Giltbert', 'Blue')
    
        # <1 Character
        with pytest.raises(InputError):
>           auth.auth_register('valid@email.com', 'password', '', 'Blue')
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/auth_test/auth_register_test.py:52: Failed
___________________________ test_register_last_name ____________________________

    def test_register_last_name():
        '''Test the input of various last name lengths into auth_register'''
    
        # Valid
        auth.auth_register('valid@email.com', 'password', 'Aziza', 'Addens')
    
        # <1 Character
        with pytest.raises(InputError):
>           auth.auth_register('valid@email.com', 'password', 'Aziza', '')
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/auth_test/auth_register_test.py:67: Failed
_____________________________ test_register_handle _____________________________

    def test_register_handle():
        '''Test that the handle generated by auth_register matches assumption'''
    
        test_user = auth.auth_register('valid@email.com', 'password', 'First',
                                       'Last')
        test_profile = user.user_profile(test_user['token'], test_user['u_id'])
>       assert test_profile['user']['handle_str'] == 'firstlast'
E       AssertionError: assert 'hjacobs' == 'firstlast'
E         - hjacobs
E         + firstlast

src/auth_test/auth_register_test.py:80: AssertionError
_________________________ test_register_unique_handle __________________________

    def test_register_unique_handle():
        '''Test that handles generated by auth_register are unique'''
    
        user_1 = auth.auth_register('valid@email.com', 'password', 'First', 'Last')
        user_profile_1 = user.user_profile(user_1['token'], user_1['u_id'])
    
        user_2 = auth.auth_register('avalid@email.com', 'password', 'First',
                                    'Last')
        user_profile_2 = user.user_profile(user_2['token'], user_2['u_id'])
    
>       assert user_profile_1['user']['handle_str'] != user_profile_2['user'][
            'handle_str']
E       AssertionError: assert 'hjacobs' != 'hjacobs'

src/auth_test/auth_register_test.py:93: AssertionError
__________________________ test_register_long_handle ___________________________

    def test_register_long_handle():
        '''Test that handles generated by auth_register are cut off at 20 characters'''
    
        test_user = auth.auth_register('valid@email.com', 'password',
                                       '123456789testing', '123456789testing')
        test_profile = user.user_profile(test_user['token'], test_user['u_id'])
>       assert test_profile['user']['handle_str'] == '123456789testing1234'
E       AssertionError: assert 'hjacobs' == '123456789testing1234'
E         - hjacobs
E         + 123456789testing1234

src/auth_test/auth_register_test.py:103: AssertionError
_________________________ test_register_email_invalid __________________________

invalid_emails = ('.latonyadavison@email.com', 'latonyadavison.@email.com', 'latonya..davison.@email.com', 'latonya@davison@email.com', 'latonyadavison.com')

    def test_register_email_invalid(invalid_emails):
        '''Test input of invalid emails into auth_register'''
    
        for email in invalid_emails:
            with pytest.raises(InputError):
>               auth.auth_register(email, 'password', 'First', 'Last')
E               Failed: DID NOT RAISE <class 'error.InputError'>

src/auth_test/auth_register_test.py:118: Failed
________________________________ test_addowner _________________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user3 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_addowner(dummy_user1, dummy_user3, channel1):
        '''
        Testing basic functionality of the channel_addowner() function.
        '''
    
        channel.channel_join(dummy_user3['token'], channel1['channel_id'])
    
        channel.channel_addowner(
            dummy_user1['token'], channel1['channel_id'], dummy_user3['u_id'])
    
        details = channel.channel_details(
            dummy_user1['token'], channel1['channel_id'])
    
>       assert len(details['owner_members']) == 2
E       AssertionError: assert 1 == 2
E        +  where 1 = len([{'name_first': 'Hayden', 'name_last': 'Jacobs', 'u_id': 1}])

src/channel_test/channel_addowner_test.py:76: AssertionError
___________________________ test_addowner_owner_self ___________________________

dummy_user1 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_addowner_owner_self(dummy_user1, channel1):
        '''
        Checking for InputError when dummy_user1, who is already an owner of channel1 tries
        to call the channel_addowner() function.
        '''
    
        with pytest.raises(InputError):
            channel.channel_addowner(
>               dummy_user1['token'], channel1['channel_id'], dummy_user1['u_id'])
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/channel_test/channel_addowner_test.py:87: Failed
______________________________ test_addowner_cid _______________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user2 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_addowner_cid(dummy_user1, dummy_user2, channel1):
        '''
        Checking for InputError when an invalid channel_id is passed into the
        channel_addowner() function.
        '''
    
        channel.channel_join(dummy_user2['token'], channel1['channel_id'])
    
        with pytest.raises(InputError):
            channel.channel_addowner(
>               dummy_user1['token'], 39503, dummy_user2['u_id'])
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/channel_test/channel_addowner_test.py:113: Failed
______________________________ test_addowner_uid _______________________________

dummy_user2 = {'token': '12345', 'u_id': 1}
dummy_user3 = {'token': '12345', 'u_id': 1}, channel2 = {'channel_id': 1}

    def test_addowner_uid(dummy_user2, dummy_user3, channel2):
        '''
        Checking for InputError when an invalid user id is passed into the
        channel_addowner() function.
        Checking for InputError when the user id of a user who is not in
        the channel is passed into channel_addowner()
        '''
    
        with pytest.raises(InputError):
            channel.channel_addowner(
>               dummy_user2['token'], channel2['channel_id'], 898009)
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/channel_test/channel_addowner_test.py:126: Failed
_________________________ test_invalid_token_addowner __________________________

dummy_user1 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}
invalid_token = '12345'

    def test_invalid_token_addowner(dummy_user1, channel1, invalid_token):
        '''
        Testing case when the token passed into the channel_addowner() function is invalid.
        '''
    
        with pytest.raises(AccessError):
            channel.channel_addowner(
>               invalid_token, channel1['channel_id'], dummy_user1['u_id'])
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channel_test/channel_addowner_test.py:140: Failed
___________________________ test_details_added_owner ___________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user2 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_details_added_owner(dummy_user1, dummy_user2, channel1):
        '''
        Adding another owner (dummy_user2) to name1 and checking if the channel
        has 2 owners.
        '''
    
        channel.channel_addowner(
            dummy_user1['token'], channel1['channel_id'], dummy_user2['u_id'])
    
        details = channel.channel_details(
            dummy_user1['token'], channel1['channel_id'])
    
>       assert len(details['owner_members']) == 2
E       AssertionError: assert 1 == 2
E        +  where 1 = len([{'name_first': 'Hayden', 'name_last': 'Jacobs', 'u_id': 1}])

src/channel_test/channel_details_test.py:92: AssertionError
_____________________________ test_details_invalid _____________________________

dummy_user1 = {'token': '12345', 'u_id': 1}, channel2 = {'channel_id': 1}

    def test_details_invalid(dummy_user1, channel2):
        '''
        Testing case when channel ID is invalid.
        Testing case when user asking for details isn't part of the channel.
        '''
    
        with pytest.raises(InputError):
>           channel.channel_details(dummy_user1['token'], 42045)
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/channel_test/channel_details_test.py:113: Failed
__________________________ test_invalid_token_details __________________________

channel1 = {'channel_id': 1}, invalid_token = '12345'

    def test_invalid_token_details(channel1, invalid_token):
        '''
        Testing case when the token passed into the channel_details() function is invalid.
        '''
    
        with pytest.raises(AccessError):
>           channel.channel_details(invalid_token, channel1['channel_id'])
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channel_test/channel_details_test.py:126: Failed
_____________________________ test_invite_channel ______________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user2 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_invite_channel(dummy_user1, dummy_user2, channel1):
        '''
        Testing channel invite function with valid and invalid channel details.
        Inviting dummy_user2 to channel1, and attempting to invite dummy_user2
        to a channel with invalid channel_id.
        '''
    
        # testing channel invite function to valid channel.
        channel.channel_invite(
            dummy_user1['token'], channel1['channel_id'], dummy_user2['u_id'])
    
        details = channel.channel_details(
            dummy_user1['token'], channel1['channel_id'])
    
>       assert len(details['all_members']) == 2
E       AssertionError: assert 1 == 2
E        +  where 1 = len([{'name_first': 'Hayden', 'name_last': 'Jacobs', 'u_id': 1}])

src/channel_test/channel_invite_test.py:76: AssertionError
_______________________________ test_invite_user _______________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user2 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_invite_user(dummy_user1, dummy_user2, channel1):
        '''
        Testing channel invite function for a non-existent user.
        Checking if dummy_user2 is in channel1 using a loop.
        '''
    
        # testing channel invite for non-existent user.
        with pytest.raises(InputError):
            channel.channel_invite(
>               dummy_user1['token'], channel1['channel_id'], 69)
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/channel_test/channel_invite_test.py:93: Failed
______________________________ test_invite_access ______________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user2 = {'token': '12345', 'u_id': 1}, channel2 = {'channel_id': 1}

    def test_invite_access(dummy_user1, dummy_user2, channel2):
        '''
        Testing case when inviting user is not a member of a channel.channel_
        At this point - the channel name1 has both users (dummy_user1 and dummy_user2)
        but the channel name2 only has dummy_user2.
        '''
        with pytest.raises(AccessError):
            channel.channel_invite(
>               dummy_user1['token'], channel2, dummy_user2['u_id'])
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channel_test/channel_invite_test.py:110: Failed
__________________________ test_invalid_token_invite ___________________________

dummy_user1 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}
invalid_token = '12345'

    def test_invalid_token_invite(dummy_user1, channel1, invalid_token):
        '''
        Testing case when the token passed into the channel_invite() function is invalid.
        '''
    
        with pytest.raises(AccessError):
            channel.channel_invite(
>               invalid_token, channel1['channel_id'], dummy_user1['u_id'])
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channel_test/channel_invite_test.py:120: Failed
________________________________ test_join_new _________________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user3 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_join_new(dummy_user1, dummy_user3, channel1):
        '''
        Testing basic functions of channel_join.
        New user joining channel1 (public) and checking if channel1 has 3 members.
        '''
    
        channel.channel_join(dummy_user3['token'], channel1['channel_id'])
    
        details = channel.channel_details(
            dummy_user1['token'], channel1['channel_id'])
    
>       assert len(details['all_members']) == 2
E       AssertionError: assert 1 == 2
E        +  where 1 = len([{'name_first': 'Hayden', 'name_last': 'Jacobs', 'u_id': 1}])

src/channel_test/channel_join_test.py:74: AssertionError
_________________________________ test_join_id _________________________________

dummy_user1 = {'token': '12345', 'u_id': 1}

    def test_join_id(dummy_user1):
        '''
        Testing for an InputError when an invalid channel id is passed into the
        channel_join() function.
        '''
    
        with pytest.raises(InputError):
>           channel.channel_join(dummy_user1['token'], 90439)
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/channel_test/channel_join_test.py:84: Failed
______________________________ test_join_private _______________________________

dummy_user1 = {'token': '12345', 'u_id': 1}, channel_priv = {'channel_id': 1}

    def test_join_private(dummy_user1, channel_priv):
        '''
        Testing channel_join function for a private channel.
        '''
    
        with pytest.raises(AccessError):
>           channel.channel_join(dummy_user1['token'], channel_priv['channel_id'])
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channel_test/channel_join_test.py:93: Failed
___________________________ test_invalid_token_join ____________________________

channel1 = {'channel_id': 1}, invalid_token = '12345'

    def test_invalid_token_join(channel1, invalid_token):
        '''
        Testing case when the token passed into the channel_join() function is invalid.
        '''
    
        with pytest.raises(AccessError):
>           channel.channel_join(invalid_token, channel1['channel_id'])
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channel_test/channel_join_test.py:115: Failed
__________________________________ test_leave __________________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user2 = {'token': '12345', 'u_id': 1}
dummy_user3 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_leave(dummy_user1, dummy_user2, dummy_user3, channel1):
        '''
        Testing basic functionality of the channel_leave() function.
        '''
    
        # adding 2 users into the channel.
        channel.channel_join(dummy_user2['token'], channel1['channel_id'])
        channel.channel_join(dummy_user3['token'], channel1['channel_id'])
    
        details = channel.channel_details(
            dummy_user1['token'], channel1['channel_id'])
    
>       assert len(details['all_members']) == 3
E       AssertionError: assert 1 == 3
E        +  where 1 = len([{'name_first': 'Hayden', 'name_last': 'Jacobs', 'u_id': 1}])

src/channel_test/channel_leave_test.py:75: AssertionError
_______________________________ test_leave_owner _______________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user2 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_leave_owner(dummy_user1, dummy_user2, channel1):
        '''
        Testing case when the only owner of a channel leaves.
        '''
    
        # adding a user to the channel.
        channel.channel_join(dummy_user2['token'], channel1['channel_id'])
    
        channel.channel_leave(dummy_user1['token'], channel1['channel_id'])
    
        details = channel.channel_details(
            dummy_user2['token'], channel1['channel_id'])
    
>       assert len(details['owner_members']) == 0
E       AssertionError: assert 1 == 0
E        +  where 1 = len([{'name_first': 'Hayden', 'name_last': 'Jacobs', 'u_id': 1}])

src/channel_test/channel_leave_test.py:99: AssertionError
______________________________ test_leave_member _______________________________

dummy_user1 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_leave_member(dummy_user1, channel1):
        '''
        Testing case when the only member of a channel leaves.
        '''
    
        channel.channel_leave(dummy_user1['token'], channel1['channel_id'])
    
        details = channel.channel_details(
            dummy_user1['token'], channel1['channel_id'])
    
>       assert len(details['owner_members']) == 0
E       AssertionError: assert 1 == 0
E        +  where 1 = len([{'name_first': 'Hayden', 'name_last': 'Jacobs', 'u_id': 1}])

src/channel_test/channel_leave_test.py:114: AssertionError
________________________________ test_leave_uid ________________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user2 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_leave_uid(dummy_user1, dummy_user2, channel1):
        '''
        Testing case when the channel_leave() function is called by a
        user that is not a member of the channel.
        '''
    
        with pytest.raises(AccessError):
>           channel.channel_leave(dummy_user2['token'], channel1['channel_id'])
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channel_test/channel_leave_test.py:126: Failed
________________________________ test_leave_cid ________________________________

dummy_user1 = {'token': '12345', 'u_id': 1}

    def test_leave_cid(dummy_user1):
        '''
        Testing case when an invalid channel_id is passed into the
        channel_leave() function.
        '''
    
        with pytest.raises(InputError):
>           channel.channel_leave(dummy_user1['token'], 94859)
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/channel_test/channel_leave_test.py:136: Failed
___________________________ test_invalid_token_leave ___________________________

channel1 = {'channel_id': 1}, invalid_token = '12345'

    def test_invalid_token_leave(channel1, invalid_token):
        '''
        Testing case when the token passed into the channel_leave() function is invalid.
        '''
    
        with pytest.raises(AccessError):
>           channel.channel_leave(invalid_token, channel1['channel_id'])
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channel_test/channel_leave_test.py:145: Failed
______________________________ test_messages_sent ______________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user2 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_messages_sent(dummy_user1, dummy_user2, channel1):
        '''
        dummy_user1 sends a message into channel1 and then dummy_user2 sends a reply.
        assert that the length of the message history is now 2.
        assert that the start value is actually 0.
        '''
    
        channel.channel_invite(
            dummy_user1['token'], channel1['channel_id'], dummy_user2['u_id'])
    
        message.message_send(
            dummy_user1['token'], channel1['channel_id'], "Im Batman")
    
        message.message_send(
            dummy_user2['token'], channel1['channel_id'], "yeah right")
    
        # Getting the history of messages from 0 to 50 (by default) and checking if the length of the history is 2.
        history = channel.channel_messages(
            dummy_user1['token'], channel1['channel_id'], 0)
    
>       assert len(history['messages']) == 2
E       AssertionError: assert 1 == 2
E        +  where 1 = len([{'message': 'Hello world', 'message_id': 1, 'time_created': 1582426789, 'u_id': 1}])

src/channel_test/channel_messages_test.py:83: AssertionError
_____________________________ test_messages_remove _____________________________

dummy_user2 = {'token': '12345', 'u_id': 1}, channel2 = {'channel_id': 1}

    def test_messages_remove(dummy_user2, channel2):
        '''
        dummy_user2 sends another message, then removes it.
        assert that the length of the message history is still 2.
        '''
    
        message_id = message.message_send(
            dummy_user2['token'], channel2['channel_id'], "idk why I talk to you.")
    
        message.message_remove(dummy_user2['token'], message_id['message_id'])
    
        history = channel.channel_messages(
            dummy_user2['token'], channel2['channel_id'], 0)
    
>       assert len(history['messages']) == 0
E       AssertionError: assert 1 == 0
E        +  where 1 = len([{'message': 'Hello world', 'message_id': 1, 'time_created': 1582426789, 'u_id': 1}])

src/channel_test/channel_messages_test.py:102: AssertionError
_______________________________ test_messages_id _______________________________

dummy_user1 = {'token': '12345', 'u_id': 1}

    def test_messages_id(dummy_user1):
        '''
        Checking for an InputError when an invalid channel_id is passed into the
        channel_messages function.
        '''
    
        with pytest.raises(InputError):
>           channel.channel_messages(dummy_user1['token'], 31415926, 0)
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/channel_test/channel_messages_test.py:112: Failed
_____________________________ test_messages_start ______________________________

dummy_user1 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_messages_start(dummy_user1, channel1):
        '''
        Checking for an InputError when the channel_messages function get a start
        that is greater than the size of the message history
        '''
        message.message_send(dummy_user1['token'],
                             channel1['channel_id'], "I walk")
        message.message_send(dummy_user1['token'], channel1['channel_id'], "a")
        message.message_send(dummy_user1['token'],
                             channel1['channel_id'], "lonely road")
    
        history = channel.channel_messages(
            dummy_user1['token'], channel1['channel_id'], 0)
    
        with pytest.raises(InputError):
            channel.channel_messages(
>               dummy_user1['token'], channel1['channel_id'], len(history['messages']) + 1)
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/channel_test/channel_messages_test.py:131: Failed
_____________________________ test_messages_access _____________________________

dummy_user1 = {'token': '12345', 'u_id': 1}, channel2 = {'channel_id': 1}

    def test_messages_access(dummy_user1, channel2):
        '''
        Checking for an AccessError when a user asks for message history of a channel
        that he is not a member of.
        '''
    
        with pytest.raises(AccessError):
            channel.channel_messages(
>               dummy_user1['token'], channel2['channel_id'], 0)
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channel_test/channel_messages_test.py:142: Failed
_________________________ test_invalid_token_messages __________________________

dummy_user1 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}
invalid_token = '12345'

    def test_invalid_token_messages(dummy_user1, channel1, invalid_token):
        '''
        Testing case when the token passed into the channel_messages() function is invalid.
        '''
    
        with pytest.raises(AccessError):
>           channel.channel_messages(invalid_token, channel1['channel_id'], 0)
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channel_test/channel_messages_test.py:151: Failed
_______________________________ test_removeowner _______________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user2 = {'token': '12345', 'u_id': 1}
dummy_user3 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_removeowner(dummy_user1, dummy_user2, dummy_user3, channel1):
        '''
        Testing the basic functionality of the channel_removeowner() function.
        '''
    
        # making dummy_user 2 and 3 members, and then owners of channel1.
        channel.channel_join(dummy_user2['token'], channel1['channel_id'])
        channel.channel_join(dummy_user3['token'], channel1['channel_id'])
    
        channel.channel_addowner(
            dummy_user1['token'], channel1['channel_id'], dummy_user2['u_id'])
    
        channel.channel_addowner(
            dummy_user1['token'], channel1['channel_id'], dummy_user3['u_id'])
    
        # checking if channel1 now has 3 owners.
        details = channel.channel_details(
            dummy_user1['token'], channel1['channel_id'])
    
>       assert len(details['owner_members']) == 3
E       AssertionError: assert 1 == 3
E        +  where 1 = len([{'name_first': 'Hayden', 'name_last': 'Jacobs', 'u_id': 1}])

src/channel_test/channel_removeowner_test.py:82: AssertionError
_____________________________ test_removeowner_uid _____________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user3 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_removeowner_uid(dummy_user1, dummy_user3, channel1):
        '''
        Checking for AccessError when a user who is not an owner of a channel
        tries to remove another owner.
        '''
    
        channel.channel_join(dummy_user3['token'], channel1['channel_id'])
    
        with pytest.raises(AccessError):
            channel.channel_removeowner(
>               dummy_user3['token'], channel1['channel_id'], dummy_user1['u_id'])
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channel_test/channel_removeowner_test.py:108: Failed
____________________________ test_removeowner_empty ____________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user2 = {'token': '12345', 'u_id': 1}, channel2 = {'channel_id': 1}

    def test_removeowner_empty(dummy_user1, dummy_user2, channel2):
        '''
        Testing the channel_removeowner() function for a channel with no owners.
        '''
    
        channel.channel_invite(
            dummy_user2['token'], channel2['channel_id'], dummy_user1['u_id'])
    
        channel.channel_removeowner(
            dummy_user2['token'], channel2['channel_id'], dummy_user2['u_id'])
    
        details = channel.channel_details(
            dummy_user2['token'], channel2['channel_id'])
    
>       assert len(details['owner_members']) == 0
E       AssertionError: assert 1 == 0
E        +  where 1 = len([{'name_first': 'Hayden', 'name_last': 'Jacobs', 'u_id': 1}])

src/channel_test/channel_removeowner_test.py:130: AssertionError
_____________________________ test_removeowner_cid _____________________________

dummy_user1 = {'token': '12345', 'u_id': 1}
dummy_user2 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}

    def test_removeowner_cid(dummy_user1, dummy_user2, channel1):
        '''
        Testing for InputError when an invalid channel id is passed into the
        channel_removeowner() function.
        '''
    
        with pytest.raises(InputError):
            channel.channel_removeowner(
>               dummy_user1['token'], 98984, dummy_user2['u_id'])
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/channel_test/channel_removeowner_test.py:143: Failed
________________________ test_invalid_token_removeowner ________________________

dummy_user1 = {'token': '12345', 'u_id': 1}, channel1 = {'channel_id': 1}
invalid_token = '12345'

    def test_invalid_token_removeowner(dummy_user1, channel1, invalid_token):
        '''
        Testing case when the token passed into the channel_removeowner() function is invalid.
        '''
    
        with pytest.raises(AccessError):
            channel.channel_removeowner(
>               invalid_token, channel1['channel_id'], dummy_user1['u_id'])
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channel_test/channel_removeowner_test.py:153: Failed
_____________________________ test_create_private ______________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_create_private(test_user):
        '''Test that an unauthorised user cannot join a private channel'''
    
        test_channel = channels.channels_create(test_user['token'], 'Channel',
                                                False)
        with pytest.raises(AccessError):
>           channel.channel_join(test_user['token'], test_channel['channel_id'])
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channels_test/channels_create_test.py:25: Failed
____________________________ test_create_long_name _____________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_create_long_name(test_user):
        '''Test creation of channel with name length > 20'''
    
        with pytest.raises(InputError):
>           channels.channels_create(test_user['token'], 'i' * 21, True)
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/channels_test/channels_create_test.py:43: Failed
__________________________ test_create_invalid_token ___________________________

invalid_token = '12345'

    def test_create_invalid_token(invalid_token):
        '''Test that channels_create raises an AccessError when given invalid token'''
        with pytest.raises(AccessError):
>           channels.channels_create(invalid_token, 'Channel', True)
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channels_test/channels_create_test.py:49: Failed
__________________________________ test_list ___________________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_list(test_user):
        '''Test that channels_list only returns channels the user is in'''
    
        joined_1 = channels.channels_create(test_user['token'], 'One', True)
        joined_2 = channels.channels_create(test_user['token'], 'Two', True)
        not_joined = channels.channels_create(test_user['token'], 'Three', True)
    
        channel.channel_join(test_user['token'], joined_1['channel_id'])
        channel.channel_join(test_user['token'], joined_2['channel_id'])
    
        joined_channel_ids = [joined_1['channel_id'], joined_2['channel_id']]
    
        joined_channels = channels.channels_list(test_user['token'])['channels']
>       assert len(joined_channels) == 2
E       AssertionError: assert 1 == 2
E        +  where 1 = len([{'channel_id': 1, 'name': 'My Channel'}])

src/channels_test/channels_list_test.py:21: AssertionError
____________________________ test_list_no_channels _____________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_list_no_channels(test_user):
        '''Test that channels_list doesn't return any channels when there aren't any'''
    
        all_channels = channels.channels_list(test_user['token'])['channels']
>       assert len(all_channels) == 0
E       AssertionError: assert 1 == 0
E        +  where 1 = len([{'channel_id': 1, 'name': 'My Channel'}])

src/channels_test/channels_list_test.py:41: AssertionError
___________________________ test_list_invalid_token ____________________________

invalid_token = '12345'

    def test_list_invalid_token(invalid_token):
        '''Test that channels_list raises an AccessError when given invalid token'''
        with pytest.raises(AccessError):
>           channels.channels_list(invalid_token)
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channels_test/channels_list_test.py:47: Failed
___________________________ test_listall_no_channels ___________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_listall_no_channels(test_user):
        '''Test that channels_listall doesn't return any channels when there aren't any'''
    
        all_channels = channels.channels_listall(test_user['token'])['channels']
>       assert len(all_channels) == 0
E       AssertionError: assert 1 == 0
E        +  where 1 = len([{'channel_id': 1, 'name': 'My Channel'}])

src/channels_test/channels_listall_test.py:39: AssertionError
__________________________ test_listall_invalid_token __________________________

invalid_token = '12345'

    def test_listall_invalid_token(invalid_token):
        '''Test that channels_create raises an AccessError when given invalid token'''
        with pytest.raises(AccessError):
>           channels.channels_listall(invalid_token)
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/channels_test/channels_listall_test.py:45: Failed
____________________________ test_emptyStringDelete ____________________________

test_channel = {'channel_id': 1}, test_user = {'token': '12345', 'u_id': 1}

    def test_emptyStringDelete(test_channel, test_user):
    
        ''' Testing the change from a string to an empty string. Should result in a deleted message. '''
    
        new_message = message.message_send(test_user['token'], test_channel['channel_id'], 'Message')
        message.message_edit(test_user['token'], new_message['message_id'], "")
        messages = channel.channel_messages(test_user['token'], test_channel['channel_id'], 0)
    
>       assert(new_message['message_id'] != messages['messages'][0]['message_id'])
E       assert 1 != 1

src/message_test/message_edit_test.py:29: AssertionError
_________________________ test_AccessErrorUnauthorized _________________________

test_channel = {'channel_id': 1}, test_user = {'token': '12345', 'u_id': 1}
new_user = <function new_user.<locals>._new_user at 0x7fdb51898950>

    def test_AccessErrorUnauthorized(test_channel, test_user, new_user):
    
        ''' Testing an AccessError thrown when a default user tries to edit an owner's message. '''
    
        second_user = new_user('tester2@gmail.com')
        channel.channel_invite(test_user['token'], test_channel['channel_id'], second_user['u_id'])
        new_message = message.message_send(test_user['token'], test_channel['channel_id'], 'Message')
    
        with pytest.raises(AccessError):
>           message.message_edit(second_user['token'], new_message['message_id'], 'New Message')
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/message_test/message_edit_test.py:52: Failed
___________________________ test_AccessErrorNotOwner ___________________________

test_channel = {'channel_id': 1}, test_user = {'token': '12345', 'u_id': 1}
new_user = <function new_user.<locals>._new_user at 0x7fdb51898a60>

    def test_AccessErrorNotOwner(test_channel, test_user, new_user):
    
        ''' Testing an AccessError thrown when a default user attempts to edit another
        default user's message. '''
    
        second_user = new_user('tester2@gmail.com')
        third_user = new_user('tester3@gmail.com')
        channel.channel_invite(test_user['token'], test_channel['channel_id'], second_user['u_id'])
        channel.channel_invite(test_user['token'], test_channel['channel_id'], third_user['u_id'])
        new_message = message.message_send(second_user['token'], test_channel['channel_id'], 'Message')
    
        with pytest.raises(AccessError):
>           message.message_edit(third_user['token'], new_message['message_id'], 'New Message')
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/message_test/message_edit_test.py:67: Failed
____________________________ test_invalidtoken_edit ____________________________

test_channel = {'channel_id': 1}, test_user = {'token': '12345', 'u_id': 1}

    def test_invalidtoken_edit(test_channel, test_user):
    
        ''' Testing that an invalid token will raise an AccessError. '''
    
        new_message = message.message_send(test_user['token'], test_channel['channel_id'], 'Message')
    
        with pytest.raises(AccessError):
>           message.message_edit('NOTAVALIDTOKEN', new_message['message_id'], 'New Message')
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/message_test/message_edit_test.py:77: Failed
__________________________ test_messageremove_wrongID __________________________

test_channel = {'channel_id': 1}, test_user = {'token': '12345', 'u_id': 1}

    def test_messageremove_wrongID(test_channel, test_user):
    
        ''' Testing if an InputError is thrown when an invalid message_id is input. '''
    
        with pytest.raises(InputError):
>               message.message_remove(test_user['token'], 99999)
E               Failed: DID NOT RAISE <class 'error.InputError'>

src/message_test/message_remove_test.py:37: Failed
___________________________ test_unauthorizedRemoval ___________________________

test_channel = {'channel_id': 1}, test_user = {'token': '12345', 'u_id': 1}
new_user = <function new_user.<locals>._new_user at 0x7fdb5187c950>

    def test_unauthorizedRemoval(test_channel, test_user, new_user):
    
        ''' Testing that an AccessError is thrown when a default user is trying to remove
        another default user's message'''
    
        second_user = new_user('tester2@gmail.com')
        channel.channel_invite(test_user['token'], test_channel['channel_id'], second_user['u_id'])
        new_message = message.message_send(test_user['token'], test_channel['channel_id'], 'Message')
    
        with pytest.raises(AccessError):
>           message.message_remove(second_user['token'], new_message['message_id'])
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/message_test/message_remove_test.py:50: Failed
___________________________ test_invalidtoken_remove ___________________________

test_channel = {'channel_id': 1}, test_user = {'token': '12345', 'u_id': 1}

    def test_invalidtoken_remove(test_channel, test_user):
    
        ''' Testing that an invalid token will raise an AccessError. '''
    
        new_message = message.message_send(test_user['token'], test_channel['channel_id'], 'Message')
    
        with pytest.raises(AccessError):
>           message.message_remove('NOTAVALIDTOKEN', new_message['message_id'])
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/message_test/message_remove_test.py:83: Failed
____________________________ test_sendunauthorized _____________________________

test_channel = {'channel_id': 1}, test_user = {'token': '12345', 'u_id': 1}
new_user = <function new_user.<locals>._new_user at 0x7fdb5187c0d0>

    def test_sendunauthorized(test_channel, test_user, new_user):
    
        ''' Testing that an AccessError is thrown when a user attempts to send a
        message in a channel to which they are not joined. '''
    
        second_user = new_user('test@test.com')
    
        with pytest.raises(AccessError):
>           message.message_send(second_user['token'], test_channel['channel_id'], 'Message')
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/message_test/message_send_test.py:28: Failed
________________________ test_sendauthorization_change _________________________

test_channel = {'channel_id': 1}, test_user = {'token': '12345', 'u_id': 1}
new_user = <function new_user.<locals>._new_user at 0x7fdb518756a8>

    def test_sendauthorization_change(test_channel, test_user, new_user):
    
        ''' Testing a scenario where a user attempts to send a message in a server they have
        not joined. This should throw an AccessError. After a channel invitation they should
        be able to send messages inside the channel. '''
    
        second_user = new_user('tester2@test.com')
    
        with pytest.raises(AccessError):
>           message.message_send(second_user['token'], test_channel['channel_id'], 'Message')
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/message_test/message_send_test.py:40: Failed
__________________________ test_sendonethousandandone __________________________

test_channel = {'channel_id': 1}, test_user = {'token': '12345', 'u_id': 1}

    def test_sendonethousandandone(test_channel, test_user):
    
        ''' Testing an InputError that should be thrown when the message is greater than
        1000 characters. '''
    
        with pytest.raises(InputError):
>           message.message_send(test_user['token'], test_channel['channel_id'], 'i' * 1001)
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/message_test/message_send_test.py:53: Failed
____________________________ test_onethousandchars _____________________________

test_channel = {'channel_id': 1}, test_user = {'token': '12345', 'u_id': 1}

    def test_onethousandchars(test_channel, test_user):
    
        ''' Testing the maximum length of a message sends correctly. '''
    
>       new_message = message.message_send(second_user['token'], channel_id['channel_id'], 'i' * 1000)
E       NameError: name 'second_user' is not defined

src/message_test/message_send_test.py:60: NameError
_______________________________ test_nochar_send _______________________________

test_channel = {'channel_id': 1}, test_user = {'token': '12345', 'u_id': 1}
new_user = <function new_user.<locals>._new_user at 0x7fdb518757b8>

    def test_nochar_send(test_channel, test_user, new_user):
    
        ''' Testing that a message of zero characters raises an InputError. '''
    
        with pytest.raises(InputError):
>           message.message_send(test_user['token'], test_channel['channel_id'], '')
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/message_test/message_send_test.py:68: Failed
____________________________ test_invalidtoken_send ____________________________

test_channel = {'channel_id': 1}, test_user = {'token': '12345', 'u_id': 1}

    def test_invalidtoken_send(test_channel, test_user):
    
        ''' Testing that an invalid token will raise an AccessError. '''
    
        with pytest.raises(AccessError):
>           message.message_send('NOTAVALIDTOKEN', test_channel['channel_id'], 'Message')
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/message_test/message_send_test.py:76: Failed
____________________________ test_search_no_channel ____________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_search_no_channel(test_user):
        '''Test search function when there is no channel'''
    
>       assert len(other.search(test_user['token'], '')['messages']) == 0
E       AssertionError: assert 1 == 0
E        +  where 1 = len([{'message': 'Hello world', 'message_id': 1, 'time_created': 1582426789, 'u_id': 1}])

src/other_test/other_search_test.py:11: AssertionError
__________________________ test_search_empty_channel ___________________________

test_user = {'token': '12345', 'u_id': 1}
make_join_channel = <function make_join_channel.<locals>._make_join_channel at 0x7fdb51875840>

    def test_search_empty_channel(test_user, make_join_channel):
        '''Test search function when channel has no messages'''
    
        test_channel = make_join_channel(test_user, 'Channel')
>       assert len(other.search(test_user['token'], '')['messages']) == 0
E       AssertionError: assert 1 == 0
E        +  where 1 = len([{'message': 'Hello world', 'message_id': 1, 'time_created': 1582426789, 'u_id': 1}])

src/other_test/other_search_test.py:18: AssertionError
________________________ test_search_multiple_messages _________________________

test_user = {'token': '12345', 'u_id': 1}
make_join_channel = <function make_join_channel.<locals>._make_join_channel at 0x7fdb51875bf8>

    def test_search_multiple_messages(test_user, make_join_channel):
        '''Test search with multiple unique messages'''
    
        test_channel = make_join_channel(test_user, 'Channel')
    
        message.message_send(test_user['token'], test_channel['channel_id'],
                             'Alpha')
        message.message_send(test_user['token'], test_channel['channel_id'],
                             'Bravo')
        message.message_send(test_user['token'], test_channel['channel_id'],
                             'Charlie')
    
>       assert len(other.search(test_user['token'], 'a')['messages']) == 3
E       AssertionError: assert 1 == 3
E        +  where 1 = len([{'message': 'Hello world', 'message_id': 1, 'time_created': 1582426789, 'u_id': 1}])

src/other_test/other_search_test.py:63: AssertionError
________________________ test_search_multiple_channels _________________________

test_user = {'token': '12345', 'u_id': 1}
make_join_channel = <function make_join_channel.<locals>._make_join_channel at 0x7fdb5187c730>

    def test_search_multiple_channels(test_user, make_join_channel):
        '''Test that search works on multiple channels'''
    
        ch1 = make_join_channel(test_user, 'Channel 1')
        message.message_send(test_user['token'], ch1['channel_id'], 'Channel 1')
    
        ch2 = make_join_channel(test_user, 'Channel 2')
        message.message_send(test_user['token'], ch2['channel_id'], 'Channel 2')
    
        ch3 = make_join_channel(test_user, 'Channel 3')
        message.message_send(test_user['token'], ch3['channel_id'], 'Channel 3')
    
>       assert len(other.search(test_user['token'], 'Channel')['messages']) == 3
E       AssertionError: assert 1 == 3
E        +  where 1 = len([{'message': 'Hello world', 'message_id': 1, 'time_created': 1582426789, 'u_id': 1}])

src/other_test/other_search_test.py:80: AssertionError
______________________ test_search_unauthorised_channels _______________________

new_user = <function new_user.<locals>._new_user at 0x7fdb51898950>
make_join_channel = <function make_join_channel.<locals>._make_join_channel at 0x7fdb518b7378>

    def test_search_unauthorised_channels(new_user, make_join_channel):
        '''Test that users cannot search unauthorised channels'''
    
        tom = new_user('tom@email.com')
    
        jerry = new_user('jerry@email.com')
        mice_ch = make_join_channel(jerry, 'Mice Only')
    
        message.message_send(jerry['token'], mice_ch['channel_id'],
                             'Tom can\'t see this')
    
        assert len(other.search(jerry['token'], '')['messages']) == 1
>       assert len(other.search(tom['token'], '')['messages']) == 0
E       AssertionError: assert 1 == 0
E        +  where 1 = len([{'message': 'Hello world', 'message_id': 1, 'time_created': 1582426789, 'u_id': 1}])

src/other_test/other_search_test.py:95: AssertionError
__________________________ test_search_invalid_token ___________________________

invalid_token = '12345'

    def test_search_invalid_token(invalid_token):
        '''Test search function with invalid token'''
    
        with pytest.raises(AccessError):
>           other.search(invalid_token, '')
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/other_test/other_search_test.py:115: Failed
________________________ test_users_all_multiple_users _________________________

new_user = <function new_user.<locals>._new_user at 0x7fdb51875ae8>

    def test_users_all_multiple_users(new_user):
        '''Test that user_all returns the number of registered users'''
    
        user_1 = new_user('user_1@email.com')
        assert len(other.users_all(user_1['token'])['users']) == 1
    
        user_2 = new_user('user_2@email.com')
>       assert len(other.users_all(user_2['token'])['users']) == 2
E       AssertionError: assert 1 == 2
E        +  where 1 = len([{'email': 'cs1531@cse.unsw.edu.au', 'handle_str': 'hjacobs', 'name_first': 'Hayden', 'name_last': 'Jacobs', ...}])

src/other_test/other_user_all_test.py:24: AssertionError
_________________________ test_users_all_invalid_token _________________________

invalid_token = '12345'

    def test_users_all_invalid_token(invalid_token):
        '''Test user_all with invalid token'''
    
        with pytest.raises(AccessError):
>           other.users_all(invalid_token)
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/other_test/other_user_all_test.py:34: Failed
____________________________ test_validemailchange _____________________________

test_user = {'token': '12345', 'u_id': 1}
valid_emails = ('latonyaDAVISON@email.com', '123456789@email.com', 'lantonyDAVISON123@email.com', 'lantony_davison@email.com', 'lantony.davison@email.com', 'lantony-davison@email.com')

    def test_validemailchange(test_user, valid_emails):
    
        ''' Testing the user_profile_setemail function against the pytest fixture
        featuring a tuple of valid emails. '''
    
        for email in valid_emails:
            user.user_profile_setemail(test_user['token'], email)
            profile_info = user.user_profile(test_user['token'], test_user['u_id'])
    
>           assert profile_info['user']['email'] == email
E           AssertionError: assert 'cs1531@cse.unsw.edu.au' == 'latonyaDAVISON@email.com'
E             - cs1531@cse.unsw.edu.au
E             + latonyaDAVISON@email.com

src/user_test/user_profile_setemail_test.py:63: AssertionError
___________________________ test_invalidemailchange ____________________________

test_user = {'token': '12345', 'u_id': 1}
invalid_emails = ('.latonyadavison@email.com', 'latonyadavison.@email.com', 'latonya..davison.@email.com', 'latonya@davison@email.com', 'latonyadavison.com')

    def test_invalidemailchange(test_user, invalid_emails):
    
        ''' Testing the user_profile_setemail function against the pytest fixture
        featuring a tuple of invalid emails. '''
    
        for email in invalid_emails:
            with pytest.raises(InputError):
>               user.user_profile_setemail(test_user['token'], email)
E               Failed: DID NOT RAISE <class 'error.InputError'>

src/user_test/user_profile_setemail_test.py:73: Failed
___________________________ test_averagecase_handle ____________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_averagecase_handle(test_user):
    
        ''' Average case test where a user will change their handle to a different
        valid handle. '''
    
        user.user_profile_sethandle(test_user['token'], 'testeraccount42')
        profile_info = user.user_profile(test_user['token'], test_user['u_id'])
    
>       assert profile_info['user']['handle_str'] == 'testeraccount42'
E       AssertionError: assert 'hjacobs' == 'testeraccount42'
E         - hjacobs
E         + testeraccount42

src/user_test/user_profile_sethandle_test.py:18: AssertionError
__________________________ test_lessthanthree_handle ___________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_lessthanthree_handle(test_user):
    
        ''' Case where a handle change should result in an InputError if the new
        handle is fewer than 3 characters (3 not inclusive). '''
    
        with pytest.raises(InputError):
>           user.user_profile_sethandle(test_user['token'], 'i' * 2)
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/user_test/user_profile_sethandle_test.py:27: Failed
________________________ test_greaterthantwenty_handle _________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_greaterthantwenty_handle(test_user):
    
        ''' Case where a handle change should result in an InputError if the new
        handle is greater than 20 characters (20 not inclusive). '''
    
        with pytest.raises(InputError):
>           user.user_profile_sethandle(test_user['token'], 'i' * 21)
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/user_test/user_profile_sethandle_test.py:36: Failed
_____________________________ test_existing_handle _____________________________

test_user = {'token': '12345', 'u_id': 1}
new_user = <function new_user.<locals>._new_user at 0x7fdb5183a0d0>

    def test_existing_handle(test_user, new_user):
    
        ''' Case where a user attempts to change their handle to an existing handle. '''
    
        user2 = new_user('tester2@mail.com')
        user.user_profile_sethandle(user2['token'], 'knownhandle')
    
        ''' With a state set at which we are certain user2 has handle 'knownhandle',
        an InputError should be raised when test_user attempts to change their handle
        to 'knownhandle' '''
    
        with pytest.raises(InputError):
>           user.user_profile_sethandle(test_user['token'], 'knownhandle')
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/user_test/user_profile_sethandle_test.py:51: Failed
_____________________________ test_changetoitsown ______________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_changetoitsown(test_user):
    
        ''' Case where a user attempts to change their handle to their current handle. '''
    
        user.user_profile_sethandle(test_user['token'], 'knownhandle')
    
        with pytest.raises(InputError):
>           user.user_profile_sethandle(test_user['token'], 'knownhandle')
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/user_test/user_profile_sethandle_test.py:61: Failed
___________________________ test_invalidtoken_handle ___________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_invalidtoken_handle(test_user):
    
        ''' Case where an invalid token is passed into the function. '''
    
        with pytest.raises(AccessError):
>           user.user_profile_sethandle('NOTAVALIDTOKEN', 'knownhandle')
E           Failed: DID NOT RAISE <class 'error.AccessError'>

src/user_test/user_profile_sethandle_test.py:69: Failed
___________________________ test_averagecase_setname ___________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_averagecase_setname(test_user):
    
        ''' Testing an average case where a user will change their name to a valid
        choice. '''
    
        user.user_profile_setname(test_user['token'], 'Ipsum', 'Lorem')
        profile_info = user.user_profile(test_user['token'], test_user['u_id'])
    
>       assert profile_info['user']['name_first'] == 'Ipsum'
E       AssertionError: assert 'Hayden' == 'Ipsum'
E         - Hayden
E         + Ipsum

src/user_test/user_profile_setname_test.py:18: AssertionError
___________________________ test_firstzerocharacter ____________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_firstzerocharacter(test_user):
    
        ''' Testing that the user_profile_setname function will raise an InputError
        if the value of the first name contains zero characters. '''
    
        with pytest.raises(InputError):
>           user.user_profile_setname(test_user['token'], '', 'Lorem')
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/user_test/user_profile_setname_test.py:28: Failed
_____________________________ test_firstoverfifty ______________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_firstoverfifty(test_user):
    
        ''' Testing that the user_profile_setname function will raise an InputError
        if the value of the first name is greater than 50 characters (50 uninclusive). '''
    
        with pytest.raises(InputError):
>           user.user_profile_setname(test_user['token'], 'i' * 51, 'Lorem')
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/user_test/user_profile_setname_test.py:37: Failed
____________________________ test_lastzerocharacter ____________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_lastzerocharacter(test_user):
    
        ''' Testing that the user_profile_setname function will raise an InputError
        if the value of the last name contains zero characters. '''
    
        with pytest.raises(InputError):
>           user.user_profile_setname(test_user['token'], 'Ipsum', '')
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/user_test/user_profile_setname_test.py:46: Failed
______________________________ test_lastoverfifty ______________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_lastoverfifty(test_user):
    
        ''' Testing that the user_profile_setname function will raise an InputError
        if the value of the last name is greater than 50 characters (50 uninclusive). '''
    
        with pytest.raises(InputError):
>           user.user_profile_setname(test_user['token'], 'Ipsum', 'i' * 51)
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/user_test/user_profile_setname_test.py:55: Failed
____________________________ test_averagecase_email ____________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_averagecase_email(test_user):
    
        ''' Testing that the user_profile function returns the correct email. '''
    
        user.user_profile_setemail(test_user['token'], 'test@test.com')
        profile_information = user.user_profile(test_user['token'], test_user['u_id'])
    
>       assert 'test@test.com' == profile_information['user']['email']
E       AssertionError: assert 'test@test.com' == 'cs1531@cse.unsw.edu.au'
E         - test@test.com
E         + cs1531@cse.unsw.edu.au

src/user_test/user_profile_test.py:38: AssertionError
__________________________ test_averagecase_firstname __________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_averagecase_firstname(test_user):
    
        ''' Testing that the user_profile function returns the correct first name. '''
    
        user.user_profile_setname(test_user['token'], 'Lorem', 'Ipsum')
        profile_information = user.user_profile(test_user['token'], test_user['u_id'])
    
>       assert 'Lorem' == profile_information['user']['name_first']
E       AssertionError: assert 'Lorem' == 'Hayden'
E         - Lorem
E         + Hayden

src/user_test/user_profile_test.py:48: AssertionError
__________________________ test_averagecase_lastname ___________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_averagecase_lastname(test_user):
    
        ''' Testing that the user_profile function returns the correct last name. '''
    
        user.user_profile_setname(test_user['token'], 'Lorem', 'Ipsum')
        profile_information = user.user_profile(test_user['token'], test_user['u_id'])
    
>       assert 'Ipsum' == profile_information['user']['name_last']
E       AssertionError: assert 'Ipsum' == 'Jacobs'
E         - Ipsum
E         + Jacobs

src/user_test/user_profile_test.py:58: AssertionError
___________________________ test_averagecase_handle ____________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_averagecase_handle(test_user):
    
        ''' Testing that the user_profile function returns the correct handle. '''
    
        user.user_profile_sethandle(test_user['token'], 'testhandle')
        profile_information = user.user_profile(test_user['token'], test_user['u_id'])
    
>       assert 'testhandle' == profile_information['user']['handle_str']
E       AssertionError: assert 'testhandle' == 'hjacobs'
E         - testhandle
E         + hjacobs

src/user_test/user_profile_test.py:68: AssertionError
_______________________________ test_invalid_uid _______________________________

test_user = {'token': '12345', 'u_id': 1}

    def test_invalid_uid(test_user):
    
        ''' Testing the user_profile function if an incorrect u_id is input. '''
    
        with pytest.raises(InputError):
>           user.user_profile(test_user['token'], 99999)
E           Failed: DID NOT RAISE <class 'error.InputError'>

src/user_test/user_profile_test.py:76: Failed
===================== 93 failed, 30 passed in 0.67 seconds =====================
